name: Release

on:
  schedule:
    - cron: "0 0 * * *" # midnight UTC, daily nightly build from master

  workflow_dispatch:

  push:
    tags:
      - "v*" # When a tag is pushed, create a release

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTFLAGS: "-D warnings"
  RUSTUP_MAX_RETRIES: 10
  FETCH_DEPTH: 0 # pull in the tags for the version string
  CARGO_WORKSPACE_DIR: ${{ github.workspace }}

jobs:
  build:
    name: Build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: gpssim
            asset_name: gpssim-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: gpssim.exe
            asset_name: gpssim-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: gpssim
            asset_name: gpssim-macos-x86_64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Create output directory
        run: mkdir -p output

      - name: Build
        run: cargo build --release --target ${{ matrix.target }} --bin gpssim

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} dist/${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.asset_name }}

  publish:
    name: Publish
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}

      - name: Create dist directory
        run: mkdir -p dist

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./dist

      - name: Set release type and tag
        id: release_type
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "type=release" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "type=nightly" >> $GITHUB_OUTPUT
            echo "tag=nightly" >> $GITHUB_OUTPUT
            echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          fi

      - name: Delete previous nightly release
        if: steps.release_type.outputs.type == 'nightly'
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          delete_release: true
          tag_name: nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.release_type.outputs.type == 'nightly' && format('Nightly Build {0}', steps.release_type.outputs.date) || steps.release_type.outputs.tag }}
          tag_name: ${{ steps.release_type.outputs.tag }}
          files: ./dist/**/*
          prerelease: ${{ steps.release_type.outputs.type == 'nightly' }}
          generate_release_notes: ${{ steps.release_type.outputs.type != 'nightly' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
