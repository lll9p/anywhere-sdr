{
  "name": "Anywhere-SDR",
  "version": "0.0.1",
  "system_prompt": "You are assisting with the development of Anywhere-SDR, a Rust-based software for GNSS signal generation that can be used for SDR transmission. Currently, it implements GPS L1 C/A signals compatible with gps-sdr-sim, with plans to add support for other systems like BeiDou in the future. The project follows Rust 2024 edition standards and uses thiserror for error handling. The codebase is organized into modular crates (constants, geometry, gps, parsing, rinex, libhackrf) with a CLI application. The libhackrf crate is a modified version of libhackrf-rs with nusb replacing rusb for improved USB communication.",
  "vars": {
    "project_repo": "https://github.com/lll9p/anywhere-sdr"
  },
  "groups": [
    {
      "name": "All Code",
      "system_prompt": "This group contains all the code files in the project. Use this when you need a comprehensive overview of the entire codebase.",
      "data": [
        "gpssim-cli",
        "gpssim-main",
        "gpssim-utils",
        "gpssim-error",
        "gps-channel",
        "constants-constants",
        "gps-datetime",
        "gps-delay-ionospheric",
        "gps-delay",
        "gps-ephemeris",
        "gps-error",
        "geometry-coordinates",
        "geometry-transformation",
        "geometry-geometry",
        "geometry-traits",
        "geometry-tests",
        "geometry-error",
        "gps-gps",
        "gps-ionoutc",
        "gps-io",
        "gps-propagation",
        "gps-signal-builder",
        "gps-generator",
        "gps-generator-utils",
        "gps-generator-mod",
        "parsing-nmea",
        "parsing-user-motion",
        "parsing-mod",
        "parsing-error",
        "rinex-ephemeris",
        "rinex-ephemeris-orbit",
        "rinex-rule",
        "rinex-error",
        "rinex-mod",
        "rinex-utc",
        "rinex-utils",
        "gps-table",
        "gps-tests-prepare",
        "gps-tests-generator",
        "rinex-tests",
        "libhackrf-lib",
        "libhackrf-hackrf",
        "libhackrf-constants",
        "libhackrf-enums",
        "libhackrf-error",
        "libhackrf-prelude",
        "libhackrf-tests",
        "readme",
        "project-cargo"
      ]
    },
    {
      "name": "GPS Signal Generation",
      "system_prompt": "This group contains the core components for GPS signal generation, including the signal generator, builder pattern implementation, and channel processing.",
      "data": [
        "gps-gps",
        "gps-generator",
        "gps-generator-mod",
        "gps-signal-builder",
        "gps-generator-utils",
        "gps-channel",
        "gps-propagation",
        "gps-ephemeris",
        "gps-ionoutc",
        "gps-table"
      ]
    },
    {
      "name": "Coordinate Systems",
      "system_prompt": "This group contains modules for handling coordinate systems, geometric transformations, and location calculations essential for GPS positioning.",
      "data": [
        "geometry-geometry",
        "geometry-coordinates",
        "geometry-transformation",
        "geometry-traits",
        "geometry-error"
      ]
    },
    {
      "name": "Data Parsing and Input",
      "system_prompt": "This group contains modules for parsing various input formats like RINEX navigation files, user motion files, and NMEA GGA streams.",
      "data": [
        "parsing-mod",
        "parsing-nmea",
        "parsing-user-motion",
        "parsing-error",
        "rinex-mod",
        "rinex-ephemeris",
        "rinex-ephemeris-orbit",
        "rinex-rule",
        "rinex-utc",
        "rinex-utils",
        "rinex-error",
        "gps-io"
      ]
    },
    {
      "name": "CLI Application",
      "system_prompt": "This group contains the command-line interface application components for the GPS simulator.",
      "data": ["gpssim-main", "gpssim-cli", "gpssim-utils", "gpssim-error"]
    },
    {
      "name": "HackRF Integration",
      "system_prompt": "This group contains modules for interfacing with HackRF software-defined radio devices. The libhackrf crate is a modified version of libhackrf-rs with nusb replacing rusb for improved USB communication.",
      "data": [
        "libhackrf-lib",
        "libhackrf-hackrf",
        "libhackrf-constants",
        "libhackrf-enums",
        "libhackrf-error",
        "libhackrf-prelude",
        "libhackrf-tests"
      ]
    },
    {
      "name": "Core Utilities",
      "system_prompt": "This group contains utility modules, constants, and time-related functionality used throughout the project.",
      "data": [
        "constants-constants",
        "gps-datetime",
        "gps-delay",
        "gps-delay-ionospheric"
      ]
    },
    {
      "name": "Tests",
      "system_prompt": "This group contains test files for verifying the functionality of the GPS signal generator and other components.",
      "data": [
        "gps-tests-prepare",
        "gps-tests-generator",
        "rinex-tests",
        "geometry-tests",
        "libhackrf-tests"
      ]
    },
    {
      "name": "Error Handling",
      "system_prompt": "This group contains error handling modules using thiserror throughout the project.",
      "data": [
        "gpssim-error",
        "gps-error",
        "geometry-error",
        "parsing-error",
        "rinex-error",
        "libhackrf-error"
      ]
    },
    {
      "name": "Project Documentation",
      "system_prompt": "This group contains project documentation and configuration files.",
      "data": ["readme", "project-cargo"]
    }
  ],
  "data": {
    "gpssim-cli": {
      "type": "symbols",
      "path": "apps/gpssim/src/cli.rs",
      "description": "Command-line interface definition and argument parsing for the GPS simulator application."
    },
    "gpssim-main": {
      "type": "symbols",
      "path": "apps/gpssim/src/main.rs",
      "description": "Main entry point for the GPS simulator application."
    },
    "gpssim-utils": {
      "type": "symbols",
      "path": "apps/gpssim/src/utils.rs",
      "description": "Utility functions for the GPS simulator application."
    },
    "gpssim-error": {
      "type": "symbols",
      "path": "apps/gpssim/src/error.rs",
      "description": "Error handling for the GPS simulator application using thiserror."
    },
    "gps-channel": {
      "type": "symbols",
      "path": "crates/gps/src/channel.rs",
      "description": "GPS channel implementation for signal generation and processing."
    },
    "constants-constants": {
      "type": "symbols",
      "path": "crates/constants/src/constants.rs",
      "description": "Global constants used throughout the project, including GPS signal parameters, mathematical constants, time conversion values, and data format definitions."
    },
    "gps-datetime": {
      "type": "symbols",
      "path": "crates/gps/src/datetime.rs",
      "description": "GPS time and date conversion utilities."
    },
    "gps-delay-ionospheric": {
      "type": "symbols",
      "path": "crates/gps/src/delay/ionospheric.rs",
      "description": "Ionospheric delay modeling for GPS signal propagation."
    },
    "gps-delay": {
      "type": "symbols",
      "path": "crates/gps/src/delay.rs",
      "description": "Signal delay modeling for GPS signal propagation."
    },
    "gps-ephemeris": {
      "type": "symbols",
      "path": "crates/gps/src/ephemeris.rs",
      "description": "GPS ephemeris data structures and calculations."
    },
    "gps-error": {
      "type": "symbols",
      "path": "crates/gps/src/error.rs",
      "description": "Error handling for the GPS crate using thiserror."
    },
    "geometry-coordinates": {
      "type": "symbols",
      "path": "crates/geometry/src/coordinates.rs",
      "description": "Coordinate system representations and conversions (ECEF, LLH, etc.)."
    },
    "geometry-transformation": {
      "type": "symbols",
      "path": "crates/geometry/src/transformation.rs",
      "description": "Geometric transformations between different coordinate systems."
    },
    "geometry-geometry": {
      "type": "symbols",
      "path": "crates/geometry/src/geometry.rs",
      "description": "Main entry point for the geometry crate, defining module structure and re-exporting coordinate types (Ecef, Location, Azel, Neu) and location math traits."
    },
    "geometry-traits": {
      "type": "symbols",
      "path": "crates/geometry/src/traits.rs",
      "description": "Trait definitions for geometry types and operations."
    },
    "geometry-tests": {
      "type": "symbols",
      "path": "crates/geometry/src/tests.rs",
      "description": "Unit tests for geometry functionality."
    },
    "geometry-error": {
      "type": "symbols",
      "path": "crates/geometry/src/error.rs",
      "description": "Error handling for the geometry crate using thiserror."
    },
    "gps-gps": {
      "type": "symbols",
      "path": "crates/gps/src/gps.rs",
      "description": "Main entry point for the GPS crate, defining module structure and re-exporting key components like SignalGenerator and SignalGeneratorBuilder."
    },
    "gps-ionoutc": {
      "type": "symbols",
      "path": "crates/gps/src/ionoutc.rs",
      "description": "Ionospheric and UTC parameters for GPS signal calculations."
    },
    "gps-io": {
      "type": "symbols",
      "path": "crates/gps/src/io.rs",
      "description": "Input/output utilities for GPS data."
    },
    "gps-propagation": {
      "type": "symbols",
      "path": "crates/gps/src/propagation.rs",
      "description": "GPS signal propagation modeling."
    },
    "gps-signal-builder": {
      "type": "symbols",
      "path": "crates/gps/src/generator/builder.rs",
      "description": "SignalGeneratorBuilder implementation providing a fluent API for configuring GPS signal generation parameters with validation."
    },
    "gps-generator": {
      "type": "symbols",
      "path": "crates/gps/src/generator/signal_generator.rs",
      "description": "Core SignalGenerator implementation for GPS L1 C/A signals, handling satellite signal generation, channel allocation, and simulation execution."
    },
    "gps-generator-utils": {
      "type": "symbols",
      "path": "crates/gps/src/generator/utils.rs",
      "description": "Utility functions and helper types for GPS signal generation, including MotionMode enum for different position input methods."
    },
    "gps-generator-mod": {
      "type": "symbols",
      "path": "crates/gps/src/generator.rs",
      "description": "Module definition for the generator components, re-exporting SignalGenerator, SignalGeneratorBuilder, and MotionMode for public use."
    },
    "parsing-nmea": {
      "type": "symbols",
      "path": "crates/parsing/src/nmea.rs",
      "description": "Parser for NMEA GGA streams for dynamic position input."
    },
    "parsing-user-motion": {
      "type": "symbols",
      "path": "crates/parsing/src/user_motion.rs",
      "description": "Parser for user motion files in ECEF and LLH formats."
    },
    "parsing-mod": {
      "type": "symbols",
      "path": "crates/parsing/src/parsing.rs",
      "description": "Main entry point for the parsing crate, re-exporting functions for reading NMEA GGA streams and user motion files in different formats."
    },
    "parsing-error": {
      "type": "symbols",
      "path": "crates/parsing/src/error.rs",
      "description": "Error handling for the parsing crate using thiserror."
    },
    "rinex-ephemeris": {
      "type": "symbols",
      "path": "crates/rinex/src/ephemeris.rs",
      "description": "RINEX navigation file parser for GPS ephemerides."
    },
    "rinex-ephemeris-orbit": {
      "type": "symbols",
      "path": "crates/rinex/src/ephemeris/orbit.rs",
      "description": "Orbit calculations for RINEX ephemeris data."
    },
    "rinex-rule": {
      "type": "symbols",
      "path": "crates/rinex/src/rule.rs",
      "description": "Rules for parsing RINEX navigation files."
    },
    "rinex-error": {
      "type": "symbols",
      "path": "crates/rinex/src/error.rs",
      "description": "Error types for RINEX parsing."
    },
    "rinex-mod": {
      "type": "symbols",
      "path": "crates/rinex/src/rinex.rs",
      "description": "Main entry point for the RINEX crate, defining module structure and re-exporting key components for parsing RINEX navigation files."
    },
    "rinex-utc": {
      "type": "symbols",
      "path": "crates/rinex/src/utc.rs",
      "description": "UTC time handling for RINEX data."
    },
    "rinex-utils": {
      "type": "symbols",
      "path": "crates/rinex/src/utils.rs",
      "description": "Utility functions for RINEX parsing."
    },
    "gps-table": {
      "type": "symbols",
      "path": "crates/gps/src/table.rs",
      "description": "Lookup tables and mathematical functions for GPS calculations."
    },
    "gps-tests-prepare": {
      "type": "symbols",
      "path": "crates/gps/tests/prepare.rs",
      "description": "Test preparation utilities for GPS tests."
    },
    "gps-tests-generator": {
      "type": "symbols",
      "path": "crates/gps/tests/test-generator.rs",
      "description": "Comprehensive integration tests for the GPS signal generator functionality, comparing outputs with the original C implementation. These tests only run in release mode."
    },
    "rinex-tests": {
      "type": "symbols",
      "path": "crates/rinex/tests/rinex.rs",
      "description": "Tests for RINEX parsing functionality."
    },
    "readme": {
      "type": "file",
      "path": "README.md",
      "description": "Project documentation including features, installation instructions, usage examples, and roadmap for future development. Contains navigation links for each section."
    },
    "project-cargo": {
      "type": "file",
      "path": "Cargo.toml",
      "description": "Main Cargo configuration file for the workspace, defining crate dependencies, workspace settings, and project metadata. Includes clippy lint configurations."
    },
    "libhackrf-lib": {
      "type": "symbols",
      "path": "crates/libhackrf/src/lib.rs",
      "description": "Main entry point for the libhackrf crate, defining module structure and providing a safe and idiomatic Rust interface to HackRF devices. Modified from libhackrf-rs with nusb replacing rusb."
    },
    "libhackrf-hackrf": {
      "type": "symbols",
      "path": "crates/libhackrf/src/hackrf.rs",
      "description": "Core implementation of the HackRF struct for controlling HackRF software-defined radio devices."
    },
    "libhackrf-constants": {
      "type": "symbols",
      "path": "crates/libhackrf/src/constants.rs",
      "description": "Constants used in the libhackrf crate, including USB identifiers, endpoint addresses, and buffer sizes."
    },
    "libhackrf-enums": {
      "type": "symbols",
      "path": "crates/libhackrf/src/enums.rs",
      "description": "Enum definitions for HackRF device modes, synchronization modes, and USB control request codes."
    },
    "libhackrf-error": {
      "type": "symbols",
      "path": "crates/libhackrf/src/error.rs",
      "description": "Error handling for the libhackrf crate using thiserror, defining specific error types for HackRF operations."
    },
    "libhackrf-prelude": {
      "type": "symbols",
      "path": "crates/libhackrf/src/prelude.rs",
      "description": "Convenient re-exports of the most commonly used types and functions from the libhackrf crate."
    },
    "libhackrf-tests": {
      "type": "symbols",
      "path": "crates/libhackrf/src/tests.rs",
      "description": "Tests for the libhackrf crate that require physical HackRF hardware to run, marked with #[ignore] to prevent automatic execution during normal test runs."
    }
  }
}
